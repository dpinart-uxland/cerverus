// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Cerverus.Features.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LoadLocationHierarchyFromFileFeature : object, Xunit.IClassFixture<LoadLocationHierarchyFromFileFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateLocationHierarchyFromFile.feature"
#line hidden
        
        public LoadLocationHierarchyFromFileFeature(LoadLocationHierarchyFromFileFeature.FixtureData fixtureData, Cerverus_Features_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Load location hierarchy from file", "As a system admin\nI want to be able to define a hiearchy location in an spreed sh" +
                    "eet and push it to the system to create the hierarcy\nSo I can easily setup the s" +
                    "ystem", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a top level root hierarchy")]
        [Xunit.TraitAttribute("FeatureTitle", "Load location hierarchy from file")]
        [Xunit.TraitAttribute("Description", "Create a top level root hierarchy")]
        public void CreateATopLevelRootHierarchy()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a top level root hierarchy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
        testRunner.Given("I\'m an logged in as an admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "name",
                            "parent",
                            "description"});
                table1.AddRow(new string[] {
                            "1",
                            "CAT",
                            "",
                            "Catalunya"});
                table1.AddRow(new string[] {
                            "2",
                            "AND",
                            "",
                            "Andalusia"});
                table1.AddRow(new string[] {
                            "3",
                            "BAR",
                            "CAT",
                            "Comarques de Barcelona"});
                table1.AddRow(new string[] {
                            "4",
                            "GIR",
                            "CAT",
                            "Comarques de Girona"});
                table1.AddRow(new string[] {
                            "5",
                            "SEV",
                            "AND",
                            "Província de Sevilla"});
                table1.AddRow(new string[] {
                            "6",
                            "MAL",
                            "AND",
                            "Província de Málaga"});
                table1.AddRow(new string[] {
                            "7",
                            "BARC",
                            "BAR",
                            "Barcelonès"});
                table1.AddRow(new string[] {
                            "8",
                            "GIRN",
                            "GIR",
                            "Gironès"});
                table1.AddRow(new string[] {
                            "9",
                            "BCN",
                            "BARC",
                            "Barclona"});
                table1.AddRow(new string[] {
                            "10",
                            "BCNSANTS",
                            "BCN",
                            "Barcelona Sants"});
                table1.AddRow(new string[] {
                            "11",
                            "BCNSANTS-AND",
                            "BCN",
                            "Barcelona Sants  Andanes"});
                table1.AddRow(new string[] {
                            "12",
                            "BCNSANTS-AND-1",
                            "BCNSANTS-AND",
                            "Barcelona Sants  Andana 1"});
#line 9
        testRunner.And("I have a file with the following location hierarchy", ((string)(null)), table1, "And ");
#line hidden
#line 23
        testRunner.When("I push the file to the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Then("the system should create the location hierarchy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                LoadLocationHierarchyFromFileFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                LoadLocationHierarchyFromFileFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
